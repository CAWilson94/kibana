/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: API client for tests
 *   version: Bundle (no version)
 */

import {
  ELASTIC_HTTP_VERSION_HEADER,
  X_ELASTIC_INTERNAL_ORIGIN_REQUEST,
} from '@kbn/core-http-common';
import { replaceParams } from '@kbn/openapi-common/shared';
import { FtrProviderContext } from 'x-pack/test/api_integration/ftr_provider_context';

import { routeWithNamespace } from 'x-pack/test/common/utils/security_solution';

import {
  AlertsMigrationCleanupRequestQueryInput,
  AlertsMigrationCleanupRequestParamsInput,
  AlertsMigrationCleanupRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals_migration/delete_signals_migration/delete_signals_migration.gen';
import {
  ApplyEntityEngineDataviewIndicesRequestQueryInput,
  ApplyEntityEngineDataviewIndicesRequestParamsInput,
  ApplyEntityEngineDataviewIndicesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/apply_dataview_indices.gen';
import {
  AssetCriticalityGetPrivilegesRequestQueryInput,
  AssetCriticalityGetPrivilegesRequestParamsInput,
  AssetCriticalityGetPrivilegesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/get_asset_criticality_privileges.gen';
import {
  BootstrapPrebuiltRulesRequestQueryInput,
  BootstrapPrebuiltRulesRequestParamsInput,
  BootstrapPrebuiltRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/prebuilt_rules/bootstrap_prebuilt_rules/bootstrap_prebuilt_rules.gen';
import {
  BulkUpsertAssetCriticalityRecordsRequestQueryInput,
  BulkUpsertAssetCriticalityRecordsRequestParamsInput,
  BulkUpsertAssetCriticalityRecordsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/bulk_upload_asset_criticality.gen';
import {
  CleanDraftTimelinesRequestQueryInput,
  CleanDraftTimelinesRequestParamsInput,
  CleanDraftTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/clean_draft_timelines/clean_draft_timelines_route.gen';
import {
  CleanUpRiskEngineRequestQueryInput,
  CleanUpRiskEngineRequestParamsInput,
  CleanUpRiskEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_cleanup_route.gen';
import {
  ConfigureRiskEngineSavedObjectRequestQueryInput,
  ConfigureRiskEngineSavedObjectRequestParamsInput,
  ConfigureRiskEngineSavedObjectRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_configure_saved_object_route.gen';
import {
  CopyTimelineRequestQueryInput,
  CopyTimelineRequestParamsInput,
  CopyTimelineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/copy_timeline/copy_timeline_route.gen';
import {
  CreateAlertsIndexRequestQueryInput,
  CreateAlertsIndexRequestParamsInput,
  CreateAlertsIndexRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/index_management/create_index/create_index.gen';
import {
  CreateAlertsMigrationRequestQueryInput,
  CreateAlertsMigrationRequestParamsInput,
  CreateAlertsMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals_migration/create_signals_migration/create_signals_migration.gen';
import {
  CreateAssetCriticalityRecordRequestQueryInput,
  CreateAssetCriticalityRecordRequestParamsInput,
  CreateAssetCriticalityRecordRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/create_asset_criticality.gen';
import {
  CreateRuleRequestQueryInput,
  CreateRuleRequestParamsInput,
  CreateRuleRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/crud/create_rule/create_rule_route.gen';
import {
  CreateRuleMigrationRequestQueryInput,
  CreateRuleMigrationRequestParamsInput,
  CreateRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  CreateTimelinesRequestQueryInput,
  CreateTimelinesRequestParamsInput,
  CreateTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/create_timelines/create_timelines_route.gen';
import {
  CreateUpdateProtectionUpdatesNoteRequestQueryInput,
  CreateUpdateProtectionUpdatesNoteRequestParamsInput,
  CreateUpdateProtectionUpdatesNoteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/protection_updates_note/protection_updates_note.gen';
import {
  DeleteAlertsIndexRequestQueryInput,
  DeleteAlertsIndexRequestParamsInput,
  DeleteAlertsIndexRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/index_management/delete_index/delete_index.gen';
import {
  DeleteAssetCriticalityRecordRequestQueryInput,
  DeleteAssetCriticalityRecordRequestParamsInput,
  DeleteAssetCriticalityRecordRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/delete_asset_criticality.gen';
import {
  DeleteEntityEngineRequestQueryInput,
  DeleteEntityEngineRequestParamsInput,
  DeleteEntityEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/delete.gen';
import {
  DeleteNoteRequestQueryInput,
  DeleteNoteRequestParamsInput,
  DeleteNoteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/delete_note/delete_note_route.gen';
import {
  DeleteRuleRequestQueryInput,
  DeleteRuleRequestParamsInput,
  DeleteRuleRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/crud/delete_rule/delete_rule_route.gen';
import {
  DeleteTimelinesRequestQueryInput,
  DeleteTimelinesRequestParamsInput,
  DeleteTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/delete_timelines/delete_timelines_route.gen';
import {
  DeprecatedTriggerRiskScoreCalculationRequestQueryInput,
  DeprecatedTriggerRiskScoreCalculationRequestParamsInput,
  DeprecatedTriggerRiskScoreCalculationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/entity_calculation_route.gen';
import {
  DisableRiskEngineRequestQueryInput,
  DisableRiskEngineRequestParamsInput,
  DisableRiskEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_disable_route.gen';
import {
  EnableRiskEngineRequestQueryInput,
  EnableRiskEngineRequestParamsInput,
  EnableRiskEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_enable_route.gen';
import {
  EndpointExecuteActionRequestQueryInput,
  EndpointExecuteActionRequestParamsInput,
  EndpointExecuteActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/execute/execute.gen';
import {
  EndpointFileDownloadRequestQueryInput,
  EndpointFileDownloadRequestParamsInput,
  EndpointFileDownloadRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/file_download/file_download.gen';
import {
  EndpointFileInfoRequestQueryInput,
  EndpointFileInfoRequestParamsInput,
  EndpointFileInfoRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/file_info/file_info.gen';
import {
  EndpointGetActionsDetailsRequestQueryInput,
  EndpointGetActionsDetailsRequestParamsInput,
  EndpointGetActionsDetailsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/details/details.gen';
import {
  EndpointGetActionsListRequestQueryInput,
  EndpointGetActionsListRequestParamsInput,
  EndpointGetActionsListRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/list/list.gen';
import {
  EndpointGetActionsStateRequestQueryInput,
  EndpointGetActionsStateRequestParamsInput,
  EndpointGetActionsStateRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/state/state.gen';
import {
  EndpointGetActionsStatusRequestQueryInput,
  EndpointGetActionsStatusRequestParamsInput,
  EndpointGetActionsStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/status/status.gen';
import {
  EndpointGetFileActionRequestQueryInput,
  EndpointGetFileActionRequestParamsInput,
  EndpointGetFileActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/get_file/get_file.gen';
import {
  EndpointGetProcessesActionRequestQueryInput,
  EndpointGetProcessesActionRequestParamsInput,
  EndpointGetProcessesActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/running_procs/running_procs.gen';
import {
  EndpointIsolateActionRequestQueryInput,
  EndpointIsolateActionRequestParamsInput,
  EndpointIsolateActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/isolate/isolate.gen';
import {
  EndpointKillProcessActionRequestQueryInput,
  EndpointKillProcessActionRequestParamsInput,
  EndpointKillProcessActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/kill_process/kill_process.gen';
import {
  EndpointScanActionRequestQueryInput,
  EndpointScanActionRequestParamsInput,
  EndpointScanActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/scan/scan.gen';
import {
  EndpointSuspendProcessActionRequestQueryInput,
  EndpointSuspendProcessActionRequestParamsInput,
  EndpointSuspendProcessActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/suspend_process/suspend_process.gen';
import {
  EndpointUnisolateActionRequestQueryInput,
  EndpointUnisolateActionRequestParamsInput,
  EndpointUnisolateActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/unisolate/unisolate.gen';
import {
  EndpointUploadActionRequestQueryInput,
  EndpointUploadActionRequestParamsInput,
  EndpointUploadActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/upload/upload.gen';
import {
  EntityStoreGetPrivilegesRequestQueryInput,
  EntityStoreGetPrivilegesRequestParamsInput,
  EntityStoreGetPrivilegesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/get_privileges.gen';
import {
  ExportRulesRequestQueryInput,
  ExportRulesRequestParamsInput,
  ExportRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/export_rules/export_rules_route.gen';
import {
  ExportTimelinesRequestQueryInput,
  ExportTimelinesRequestParamsInput,
  ExportTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/export_timelines/export_timelines_route.gen';
import {
  FinalizeAlertsMigrationRequestQueryInput,
  FinalizeAlertsMigrationRequestParamsInput,
  FinalizeAlertsMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals_migration/finalize_signals_migration/finalize_signals_migration.gen';
import {
  FindAssetCriticalityRecordsRequestQueryInput,
  FindAssetCriticalityRecordsRequestParamsInput,
  FindAssetCriticalityRecordsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/list_asset_criticality.gen';
import {
  FindRulesRequestQueryInput,
  FindRulesRequestParamsInput,
  FindRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/find_rules/find_rules_route.gen';
import {
  GetAllStatsRuleMigrationRequestQueryInput,
  GetAllStatsRuleMigrationRequestParamsInput,
  GetAllStatsRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetAssetCriticalityRecordRequestQueryInput,
  GetAssetCriticalityRecordRequestParamsInput,
  GetAssetCriticalityRecordRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/get_asset_criticality.gen';
import {
  GetAssetCriticalityStatusRequestQueryInput,
  GetAssetCriticalityStatusRequestParamsInput,
  GetAssetCriticalityStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/get_asset_criticality_status.gen';
import {
  GetDraftTimelinesRequestQueryInput,
  GetDraftTimelinesRequestParamsInput,
  GetDraftTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/get_draft_timelines/get_draft_timelines_route.gen';
import {
  GetEndpointMetadataListRequestQueryInput,
  GetEndpointMetadataListRequestParamsInput,
  GetEndpointMetadataListRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/metadata/get_metadata.gen';
import {
  GetEndpointSuggestionsRequestQueryInput,
  GetEndpointSuggestionsRequestParamsInput,
  GetEndpointSuggestionsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/suggestions/get_suggestions.gen';
import {
  GetEntityEngineRequestQueryInput,
  GetEntityEngineRequestParamsInput,
  GetEntityEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/get.gen';
import {
  GetEntityStoreStatusRequestQueryInput,
  GetEntityStoreStatusRequestParamsInput,
  GetEntityStoreStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/status.gen';
import {
  GetNotesRequestQueryInput,
  GetNotesRequestParamsInput,
  GetNotesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/get_notes/get_notes_route.gen';
import {
  GetPolicyResponseRequestQueryInput,
  GetPolicyResponseRequestParamsInput,
  GetPolicyResponseRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/policy/policy_response.gen';
import {
  GetProtectionUpdatesNoteRequestQueryInput,
  GetProtectionUpdatesNoteRequestParamsInput,
  GetProtectionUpdatesNoteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/protection_updates_note/protection_updates_note.gen';
import {
  GetRiskEngineStatusRequestQueryInput,
  GetRiskEngineStatusRequestParamsInput,
  GetRiskEngineStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_status_route.gen';
import {
  GetRuleExecutionEventsRequestQueryInput,
  GetRuleExecutionEventsRequestParamsInput,
  GetRuleExecutionEventsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_monitoring/rule_execution_logs/get_rule_execution_events/get_rule_execution_events_route.gen';
import {
  GetRuleExecutionResultsRequestQueryInput,
  GetRuleExecutionResultsRequestParamsInput,
  GetRuleExecutionResultsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_monitoring/rule_execution_logs/get_rule_execution_results/get_rule_execution_results_route.gen';
import {
  GetRuleMigrationRequestQueryInput,
  GetRuleMigrationRequestParamsInput,
  GetRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationIntegrationsRequestQueryInput,
  GetRuleMigrationIntegrationsRequestParamsInput,
  GetRuleMigrationIntegrationsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationPrebuiltRulesRequestQueryInput,
  GetRuleMigrationPrebuiltRulesRequestParamsInput,
  GetRuleMigrationPrebuiltRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationPrivilegesRequestQueryInput,
  GetRuleMigrationPrivilegesRequestParamsInput,
  GetRuleMigrationPrivilegesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationResourcesRequestQueryInput,
  GetRuleMigrationResourcesRequestParamsInput,
  GetRuleMigrationResourcesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationResourcesMissingRequestQueryInput,
  GetRuleMigrationResourcesMissingRequestParamsInput,
  GetRuleMigrationResourcesMissingRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationStatsRequestQueryInput,
  GetRuleMigrationStatsRequestParamsInput,
  GetRuleMigrationStatsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetRuleMigrationTranslationStatsRequestQueryInput,
  GetRuleMigrationTranslationStatsRequestParamsInput,
  GetRuleMigrationTranslationStatsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  GetTimelineRequestQueryInput,
  GetTimelineRequestParamsInput,
  GetTimelineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/get_timeline/get_timeline_route.gen';
import {
  GetTimelinesRequestQueryInput,
  GetTimelinesRequestParamsInput,
  GetTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/get_timelines/get_timelines_route.gen';
import {
  GetWorkflowInsightsRequestQueryInput,
  GetWorkflowInsightsRequestParamsInput,
  GetWorkflowInsightsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/workflow_insights/workflow_insights.gen';
import {
  ImportRulesRequestQueryInput,
  ImportRulesRequestParamsInput,
  ImportRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/import_rules/import_rules_route.gen';
import {
  ImportTimelinesRequestQueryInput,
  ImportTimelinesRequestParamsInput,
  ImportTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/import_timelines/import_timelines_route.gen';
import {
  InitEntityEngineRequestQueryInput,
  InitEntityEngineRequestParamsInput,
  InitEntityEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/init.gen';
import {
  InitEntityStoreRequestQueryInput,
  InitEntityStoreRequestParamsInput,
  InitEntityStoreRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/enable.gen';
import {
  InitMonitoringEngineRequestQueryInput,
  InitMonitoringEngineRequestParamsInput,
  InitMonitoringEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/privilege_monitoring/engine/init.gen';
import {
  InitRiskEngineRequestQueryInput,
  InitRiskEngineRequestParamsInput,
  InitRiskEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_init_route.gen';
import {
  InstallMigrationRulesRequestQueryInput,
  InstallMigrationRulesRequestParamsInput,
  InstallMigrationRulesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  InstallPrebuiltRulesAndTimelinesRequestQueryInput,
  InstallPrebuiltRulesAndTimelinesRequestParamsInput,
  InstallPrebuiltRulesAndTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/prebuilt_rules/install_prebuilt_rules_and_timelines/install_prebuilt_rules_and_timelines_route.gen';
import {
  InstallPrepackedTimelinesRequestQueryInput,
  InstallPrepackedTimelinesRequestParamsInput,
  InstallPrepackedTimelinesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/install_prepackaged_timelines/install_prepackaged_timelines_route.gen';
import {
  InternalUploadAssetCriticalityRecordsRequestQueryInput,
  InternalUploadAssetCriticalityRecordsRequestParamsInput,
  InternalUploadAssetCriticalityRecordsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/upload_asset_criticality_csv.gen';
import {
  ListEntitiesRequestQueryInput,
  ListEntitiesRequestParamsInput,
  ListEntitiesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/entities/list_entities.gen';
import {
  ListEntityEnginesRequestQueryInput,
  ListEntityEnginesRequestParamsInput,
  ListEntityEnginesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/list.gen';
import {
  PatchRuleRequestQueryInput,
  PatchRuleRequestParamsInput,
  PatchRuleRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/crud/patch_rule/patch_rule_route.gen';
import {
  PatchTimelineRequestQueryInput,
  PatchTimelineRequestParamsInput,
  PatchTimelineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/patch_timelines/patch_timeline_route.gen';
import {
  PerformRulesBulkActionRequestQueryInput,
  PerformRulesBulkActionRequestParamsInput,
  PerformRulesBulkActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/bulk_actions/bulk_actions_route.gen';
import {
  PersistFavoriteRouteRequestQueryInput,
  PersistFavoriteRouteRequestParamsInput,
  PersistFavoriteRouteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/persist_favorite/persist_favorite_route.gen';
import {
  PersistNoteRouteRequestQueryInput,
  PersistNoteRouteRequestParamsInput,
  PersistNoteRouteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/persist_note/persist_note_route.gen';
import {
  PersistPinnedEventRouteRequestQueryInput,
  PersistPinnedEventRouteRequestParamsInput,
  PersistPinnedEventRouteRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/pinned_events/pinned_events_route.gen';
import {
  PreviewRiskScoreRequestQueryInput,
  PreviewRiskScoreRequestParamsInput,
  PreviewRiskScoreRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/preview_route.gen';
import {
  PrivMonHealthRequestQueryInput,
  PrivMonHealthRequestParamsInput,
  PrivMonHealthRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/privilege_monitoring/health.gen';
import {
  ReadAlertsIndexRequestQueryInput,
  ReadAlertsIndexRequestParamsInput,
  ReadAlertsIndexRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/index_management/read_index/read_index.gen';
import {
  ReadAlertsMigrationStatusRequestQueryInput,
  ReadAlertsMigrationStatusRequestParamsInput,
  ReadAlertsMigrationStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals_migration/read_signals_migration_status/read_signals_migration_status.gen';
import {
  ReadPrebuiltRulesAndTimelinesStatusRequestQueryInput,
  ReadPrebuiltRulesAndTimelinesStatusRequestParamsInput,
  ReadPrebuiltRulesAndTimelinesStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/prebuilt_rules/read_prebuilt_rules_and_timelines_status/read_prebuilt_rules_and_timelines_status_route.gen';
import {
  ReadPrivilegesRequestQueryInput,
  ReadPrivilegesRequestParamsInput,
  ReadPrivilegesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/index_management/read_privileges/read_privileges.gen';
import {
  ReadRiskEngineSettingsRequestQueryInput,
  ReadRiskEngineSettingsRequestParamsInput,
  ReadRiskEngineSettingsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_settings_route.gen';
import {
  ReadRuleRequestQueryInput,
  ReadRuleRequestParamsInput,
  ReadRuleRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/crud/read_rule/read_rule_route.gen';
import {
  ReadTagsRequestQueryInput,
  ReadTagsRequestParamsInput,
  ReadTagsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/read_tags/read_tags_route.gen';
import {
  ResolveTimelineRequestQueryInput,
  ResolveTimelineRequestParamsInput,
  ResolveTimelineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/timeline/resolve_timeline/resolve_timeline_route.gen';
import {
  RiskEngineGetPrivilegesRequestQueryInput,
  RiskEngineGetPrivilegesRequestParamsInput,
  RiskEngineGetPrivilegesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/get_risk_engine_privileges.gen';
import {
  RulePreviewRequestQueryInput,
  RulePreviewRequestParamsInput,
  RulePreviewRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_preview/rule_preview.gen';
import {
  RunScriptActionRequestQueryInput,
  RunScriptActionRequestParamsInput,
  RunScriptActionRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/actions/response_actions/run_script/run_script.gen';
import {
  ScheduleRiskEngineNowRequestQueryInput,
  ScheduleRiskEngineNowRequestParamsInput,
  ScheduleRiskEngineNowRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/engine_schedule_now_route.gen';
import {
  SearchAlertsRequestQueryInput,
  SearchAlertsRequestParamsInput,
  SearchAlertsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals/query_signals/query_signals_route.gen';
import {
  SearchPrivilegesIndicesRequestQueryInput,
  SearchPrivilegesIndicesRequestParamsInput,
  SearchPrivilegesIndicesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/monitoring/search_indices.gen';
import {
  SetAlertAssigneesRequestQueryInput,
  SetAlertAssigneesRequestParamsInput,
  SetAlertAssigneesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/alert_assignees/set_alert_assignees_route.gen';
import {
  SetAlertsStatusRequestQueryInput,
  SetAlertsStatusRequestParamsInput,
  SetAlertsStatusRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/signals/set_signal_status/set_signals_status_route.gen';
import {
  SetAlertTagsRequestQueryInput,
  SetAlertTagsRequestParamsInput,
  SetAlertTagsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/alert_tags/set_alert_tags/set_alert_tags.gen';
import {
  StartEntityEngineRequestQueryInput,
  StartEntityEngineRequestParamsInput,
  StartEntityEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/start.gen';
import {
  StartRuleMigrationRequestQueryInput,
  StartRuleMigrationRequestParamsInput,
  StartRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  StopEntityEngineRequestQueryInput,
  StopEntityEngineRequestParamsInput,
  StopEntityEngineRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/entity_store/engine/stop.gen';
import {
  StopRuleMigrationRequestQueryInput,
  StopRuleMigrationRequestParamsInput,
  StopRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  SuggestUserProfilesRequestQueryInput,
  SuggestUserProfilesRequestParamsInput,
  SuggestUserProfilesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/users/suggest_user_profiles_route.gen';
import {
  TriggerRiskScoreCalculationRequestQueryInput,
  TriggerRiskScoreCalculationRequestParamsInput,
  TriggerRiskScoreCalculationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/risk_engine/entity_calculation_route.gen';
import {
  UpdateRuleRequestQueryInput,
  UpdateRuleRequestParamsInput,
  UpdateRuleRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/detection_engine/rule_management/crud/update_rule/update_rule_route.gen';
import {
  UpdateRuleMigrationRequestQueryInput,
  UpdateRuleMigrationRequestParamsInput,
  UpdateRuleMigrationRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';
import {
  UpdateWorkflowInsightRequestQueryInput,
  UpdateWorkflowInsightRequestParamsInput,
  UpdateWorkflowInsightRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/endpoint/workflow_insights/workflow_insights.gen';
import {
  UploadAssetCriticalityRecordsRequestQueryInput,
  UploadAssetCriticalityRecordsRequestParamsInput,
  UploadAssetCriticalityRecordsRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/api/entity_analytics/asset_criticality/upload_asset_criticality_csv.gen';
import {
  UpsertRuleMigrationResourcesRequestQueryInput,
  UpsertRuleMigrationResourcesRequestParamsInput,
  UpsertRuleMigrationResourcesRequestBodyInput,
} from '/Users/charlottealexandrawilson/Public/kibana/kibana-fork/kibana/x-pack/solutions/security/plugins/security_solution/common/siem_migrations/model/api/rules/rule_migration.gen';

export function SecuritySolutionApiProvider({ getService }: FtrProviderContext) {
  const supertest = getService('supertest');

  return {
    /**
      * Migrations favor data integrity over shard size. Consequently, unused or orphaned indices are artifacts of
the migration process. A successful migration will result in both the old and new indices being present.
As such, the old, orphaned index can (and likely should) be deleted.

While you can delete these indices manually,
the endpoint accomplishes this task by applying a deletion policy to the relevant index, causing it to be deleted
after 30 days. It also deletes other artifacts specific to the migration implementation.

      */
    alertsMigrationCleanup(props: AlertsMigrationCleanupProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/detection_engine/signals/migration', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    applyEntityEngineDataviewIndices(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/entity_store/engines/apply_dataview_indices', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    assetCriticalityGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/asset_criticality/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Ensures that the packages needed for prebuilt detection rules to work are installed and up to date
     */
    bootstrapPrebuiltRules(kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace('/internal/detection_engine/prebuilt_rules/_bootstrap', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Bulk upsert up to 1000 asset criticality records.

If asset criticality records already exist for the specified entities, those records are overwritten with the specified values. If asset criticality records don't exist for the specified entities, new records are created.

      */
    bulkUpsertAssetCriticalityRecords(
      props: BulkUpsertAssetCriticalityRecordsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/asset_criticality/bulk', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Create a clean draft Timeline or Timeline template for the current user.
> info
> If the user already has a draft Timeline, the existing draft Timeline is cleared and returned.

      */
    cleanDraftTimelines(props: CleanDraftTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/timeline/_draft', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Cleaning up the the Risk Engine by removing the indices, mapping and transforms
     */
    cleanUpRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/risk_score/engine/dangerously_delete_data', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Configuring the Risk Engine Saved Object
     */
    configureRiskEngineSavedObject(
      props: ConfigureRiskEngineSavedObjectProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .patch(routeWithNamespace('/api/risk_score/engine/saved_object/configure', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Copies and returns a timeline or timeline template.

      */
    copyTimeline(props: CopyTimelineProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/timeline/_copy', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createAlertsIndex(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/index', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Initiate a migration of detection alerts.
Migrations are initiated per index. While the process is neither destructive nor interferes with existing data, it may be resource-intensive. As such, it is recommended that you plan your migrations accordingly.

      */
    createAlertsMigration(props: CreateAlertsMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/migration', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Create or update an asset criticality record for a specific entity.

If a record already exists for the specified entity, that record is overwritten with the specified value. If a record doesn't exist for the specified entity, a new record is created.

      */
    createAssetCriticalityRecord(
      props: CreateAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Create a new detection rule.
> warn
> When used with [API key](https://www.elastic.co/guide/en/kibana/current/api-keys.html) authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

> If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.

You can create the following types of rules:

* **Custom query**: Searches the defined indices and creates an alert when a document matches the rule's KQL query.
* **Event correlation**: Searches the defined indices and creates an alert when results match an [Event Query Language (EQL)](https://www.elastic.co/guide/en/elasticsearch/reference/current/eql.html) query.
* **Threshold**: Searches the defined indices and creates an alert when the number of times the specified field's value meets the threshold during a single execution. When there are multiple values that meet the threshold, an alert is generated for each value.
  For example, if the threshold `field` is `source.ip` and its `value` is `10`, an alert is generated for every source IP address that appears in at least 10 of the rule's search results. If you're interested, see [Terms Aggregation](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html) for more information.
* **Indicator match**: Creates an alert when fields match values defined in the specified [Elasticsearch index](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). For example, you can create an index for IP addresses and use this index to create an alert whenever an event's `destination.ip` equals a value in the index. The index's field mappings should be [ECS-compliant](https://www.elastic.co/guide/en/ecs/current/ecs-reference.html).
* **New terms**: Generates an alert for each new term detected in source documents within a specified time range.
* **ES|QL**: Uses [Elasticsearch Query Language (ES|QL)](https://www.elastic.co/guide/en/elasticsearch/reference/current/esql.html) to find events and aggregate search results.
* **Machine learning rules**: Creates an alert when a machine learning job discovers an anomaly above the defined threshold.
> info
> To create machine learning rules, you must have the [appropriate license](https://www.elastic.co/subscriptions) or use a [cloud deployment](https://cloud.elastic.co/registration). Additionally, for the machine learning rule to function correctly, the associated machine learning job must be running.

To retrieve machine learning job IDs, which are required to create machine learning jobs, call the [Elasticsearch Get jobs API](https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job.html). Machine learning jobs that contain `siem` in the `groups` field can be used to create rules:

```json
...
"job_id": "linux_anomalous_network_activity_ecs",
"job_type": "anomaly_detector",
"job_version": "7.7.0",
"groups": [
  "auditbeat",
  "process",
  "siem"
],
...
```

Additionally, you can set up notifications for when rules create alerts. The notifications use the [Alerting and Actions framework](https://www.elastic.co/guide/en/kibana/current/alerting-getting-started.html). Each action type requires a connector. Connectors store the information required to send notifications via external systems. The following connector types are supported for rule notifications:

* Slack
* Email
* PagerDuty
* Webhook
* Microsoft Teams
* IBM Resilient
* Jira
* ServiceNow ITSM
> info
> For more information on PagerDuty fields, see [Send a v2 Event](https://developer.pagerduty.com/docs/events-api-v2/trigger-events/).

To retrieve connector IDs, which are required to configure rule notifications, call the [Find objects API](https://www.elastic.co/guide/en/kibana/current/saved-objects-api-find.html) with `"type": "action"` in the request payload.

For detailed information on Kibana actions and alerting, and additional API calls, see:

* [Alerting API](https://www.elastic.co/docs/api/doc/kibana/group/endpoint-alerting)
* [Alerting and Actions framework](https://www.elastic.co/guide/en/kibana/current/alerting-getting-started.html)
* [Connectors API](https://www.elastic.co/docs/api/doc/kibana/group/endpoint-connectors)

      */
    createRule(props: CreateRuleProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/rules', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Creates a new SIEM rules migration using the original vendor rules provided
     */
    createRuleMigration(props: CreateRuleMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Create a new Timeline or Timeline template.
     */
    createTimelines(props: CreateTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/timeline', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createUpdateProtectionUpdatesNote(
      props: CreateUpdateProtectionUpdatesNoteProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams(
              '/api/endpoint/protection_updates_note/{package_policy_id}',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    deleteAlertsIndex(kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/detection_engine/index', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Delete the asset criticality record for a specific entity.
     */
    deleteAssetCriticalityRecord(
      props: DeleteAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .delete(routeWithNamespace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    deleteEntityEngine(props: DeleteEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(
          routeWithNamespace(
            replaceParams('/api/entity_store/engines/{entityType}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Delete a note from a Timeline using the note ID.
     */
    deleteNote(props: DeleteNoteProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/note', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Delete a detection rule using the `rule_id` or `id` field.

The URL query must include one of the following:

* `id` - `DELETE /api/detection_engine/rules?id=<id>`
* `rule_id`- `DELETE /api/detection_engine/rules?rule_id=<rule_id>`

The difference between the `id` and `rule_id` is that the `id` is a unique rule identifier that is randomly generated when a rule is created and cannot be set, whereas `rule_id` is a stable rule identifier that can be assigned during rule creation.

      */
    deleteRule(props: DeleteRuleProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/detection_engine/rules', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Delete one or more Timelines or Timeline templates.
     */
    deleteTimelines(props: DeleteTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(routeWithNamespace('/api/timeline', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Calculates and persists Risk Scores for an entity, returning the calculated risk score.
     */
    deprecatedTriggerRiskScoreCalculation(
      props: DeprecatedTriggerRiskScoreCalculationProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/risk_scores/calculation/entity', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    disableRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/risk_score/engine/disable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    enableRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/risk_score/engine/enable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Run a shell command on an endpoint.
     */
    endpointExecuteAction(props: EndpointExecuteActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/execute', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Download a file from an endpoint.
     */
    endpointFileDownload(props: EndpointFileDownloadProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/api/endpoint/action/{action_id}/file/{file_id}/download', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get information for the specified file using the file ID.
     */
    endpointFileInfo(props: EndpointFileInfoProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/api/endpoint/action/{action_id}/file/{file_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the details of a response action using the action ID.
     */
    endpointGetActionsDetails(
      props: EndpointGetActionsDetailsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/api/endpoint/action/{action_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get a list of all response actions.
     */
    endpointGetActionsList(props: EndpointGetActionsListProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/endpoint/action', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get a response actions state, which reports whether encryption is enabled.
     */
    endpointGetActionsState(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/endpoint/action/state', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the status of response actions for the specified agent IDs.
     */
    endpointGetActionsStatus(
      props: EndpointGetActionsStatusProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(routeWithNamespace('/api/endpoint/action_status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get a file from an endpoint.
     */
    endpointGetFileAction(props: EndpointGetFileActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/get_file', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Get a list of all processes running on an endpoint.
     */
    endpointGetProcessesAction(
      props: EndpointGetProcessesActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/running_procs', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Isolate an endpoint from the network. The endpoint remains isolated until it's released.
     */
    endpointIsolateAction(props: EndpointIsolateActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/isolate', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Terminate a running process on an endpoint.
     */
    endpointKillProcessAction(
      props: EndpointKillProcessActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/kill_process', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Scan a specific file or directory on an endpoint for malware.
     */
    endpointScanAction(props: EndpointScanActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/scan', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Suspend a running process on an endpoint.
     */
    endpointSuspendProcessAction(
      props: EndpointSuspendProcessActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/suspend_process', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Release an isolated endpoint, allowing it to rejoin a network.
     */
    endpointUnisolateAction(props: EndpointUnisolateActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/unisolate', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Upload a file to an endpoint.
     */
    endpointUploadAction(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/upload', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    entityStoreGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/entity_store/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Export detection rules to an `.ndjson` file. The following configuration items are also included in the `.ndjson` file:
- Actions
- Exception lists
> info
> Rule actions and connectors are included in the exported file, but sensitive information about the connector (such as authentication credentials) is not included. You must re-add missing connector details after importing detection rules.

> You can use Kibana’s [Saved Objects](https://www.elastic.co/guide/en/kibana/current/managing-saved-objects.html) UI (Stack Management → Kibana → Saved Objects) or the Saved Objects APIs (experimental) to [export](https://www.elastic.co/docs/api/doc/kibana/operation/operation-exportsavedobjectsdefault) and [import](https://www.elastic.co/docs/api/doc/kibana/operation/operation-importsavedobjectsdefault) any necessary connectors before importing detection rules.

> Similarly, any value lists used for rule exceptions are not included in rule exports or imports. Use the [Manage value lists](https://www.elastic.co/guide/en/security/current/value-lists-exceptions.html#manage-value-lists) UI (Rules → Detection rules (SIEM) → Manage value lists) to export and import value lists separately.

      */
    exportRules(props: ExportRulesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/rules/_export', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object)
        .query(props.query);
    },
    /**
     * Export Timelines as an NDJSON file.
     */
    exportTimelines(props: ExportTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/timeline/_export', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object)
        .query(props.query);
    },
    /**
      * Finalize successful migrations of detection alerts. This replaces the original index's alias with the successfully migrated index's alias.
The endpoint is idempotent; therefore, it can safely be used to poll a given migration and, upon completion,
finalize it.

      */
    finalizeAlertsMigration(props: FinalizeAlertsMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/finalize_migration', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * List asset criticality records, paging, sorting and filtering as needed.
     */
    findAssetCriticalityRecords(
      props: FindAssetCriticalityRecordsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(routeWithNamespace('/api/asset_criticality/list', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Retrieve a paginated list of detection rules. By default, the first page is returned, with 20 results per page.
     */
    findRules(props: FindRulesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/rules/_find', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Retrieves the rule migrations stats for all migrations stored in the system
     */
    getAllStatsRuleMigration(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/siem_migrations/rules/stats', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the asset criticality record for a specific entity.
     */
    getAssetCriticalityRecord(
      props: GetAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(routeWithNamespace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getAssetCriticalityStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/asset_criticality/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the details of the draft Timeline  or Timeline template for the current user. If the user doesn't have a draft Timeline, an empty Timeline is returned.
     */
    getDraftTimelines(props: GetDraftTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/timeline/_draft', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getEndpointMetadataList(props: GetEndpointMetadataListProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/endpoint/metadata', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getEndpointSuggestions(props: GetEndpointSuggestionsProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/internal/api/endpoint/suggestions/{suggestion_type}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    getEntityEngine(props: GetEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/api/entity_store/engines/{entityType}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getEntityStoreStatus(props: GetEntityStoreStatusProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/entity_store/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get all notes for a given document.
     */
    getNotes(props: GetNotesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/note', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getPolicyResponse(props: GetPolicyResponseProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/endpoint/policy_response', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getProtectionUpdatesNote(
      props: GetProtectionUpdatesNoteProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams(
              '/api/endpoint/protection_updates_note/{package_policy_id}',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Returns the status of both the legacy transform-based risk engine, as well as the new risk engine
     */
    getRiskEngineStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/risk_score/engine/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getRuleExecutionEvents(props: GetRuleExecutionEventsProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams(
              '/internal/detection_engine/rules/{ruleId}/execution/events',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getRuleExecutionResults(props: GetRuleExecutionResultsProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams(
              '/internal/detection_engine/rules/{ruleId}/execution/results',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Retrieves the rule documents stored in the system given the rule migration id
     */
    getRuleMigration(props: GetRuleMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Retrieves all related integrations
     */
    getRuleMigrationIntegrations(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/siem_migrations/rules/integrations', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Retrieves all available prebuilt rules (installed and installable)
     */
    getRuleMigrationPrebuiltRules(
      props: GetRuleMigrationPrebuiltRulesProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams(
              '/internal/siem_migrations/rules/{migration_id}/prebuilt_rules',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Identifies the privileges required for a SIEM rules migration and returns the missing privileges
     */
    getRuleMigrationPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/siem_migrations/rules/missing_privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Retrieves resources for an existing SIEM rules migration
     */
    getRuleMigrationResources(
      props: GetRuleMigrationResourcesProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/resources', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Identifies missing resources from all the rules of an existing SIEM rules migration
     */
    getRuleMigrationResourcesMissing(
      props: GetRuleMigrationResourcesMissingProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams(
              '/internal/siem_migrations/rules/{migration_id}/resources/missing',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Retrieves the stats of a SIEM rules migration using the migration id provided
     */
    getRuleMigrationStats(props: GetRuleMigrationStatsProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/stats', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Retrieves the translation stats of a SIEM rules migration using the migration id provided
     */
    getRuleMigrationTranslationStats(
      props: GetRuleMigrationTranslationStatsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          routeWithNamespace(
            replaceParams(
              '/internal/siem_migrations/rules/{migration_id}/translation_stats',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the details of an existing saved Timeline or Timeline template.
     */
    getTimeline(props: GetTimelineProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/timeline', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get a list of all saved Timelines or Timeline templates.
     */
    getTimelines(props: GetTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/timelines', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getWorkflowInsights(props: GetWorkflowInsightsProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/api/endpoint/workflow_insights', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
      * Import detection rules from an `.ndjson` file, including actions and exception lists. The request must include:
- The `Content-Type: multipart/form-data` HTTP header.
- A link to the `.ndjson` file containing the rules.
> warn
> When used with [API key](https://www.elastic.co/guide/en/kibana/current/api-keys.html) authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

> If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.
> info
> To import rules with actions, you need at least Read privileges for the Action and Connectors feature. To overwrite or add new connectors, you need All privileges for the Actions and Connectors feature. To import rules without actions, you don’t need Actions and Connectors privileges. Refer to [Enable and access detections](https://www.elastic.co/guide/en/security/current/detections-permissions-section.html#enable-detections-ui) for more information.

> info
> Rule actions and connectors are included in the exported file, but sensitive information about the connector (such as authentication credentials) is not included. You must re-add missing connector details after importing detection rules.

> You can use Kibana’s [Saved Objects](https://www.elastic.co/guide/en/kibana/current/managing-saved-objects.html) UI (Stack Management → Kibana → Saved Objects) or the Saved Objects APIs (experimental) to [export](https://www.elastic.co/docs/api/doc/kibana/operation/operation-exportsavedobjectsdefault) and [import](https://www.elastic.co/docs/api/doc/kibana/operation/operation-importsavedobjectsdefault) any necessary connectors before importing detection rules.

> Similarly, any value lists used for rule exceptions are not included in rule exports or imports. Use the [Manage value lists](https://www.elastic.co/guide/en/security/current/value-lists-exceptions.html#manage-value-lists) UI (Rules → Detection rules (SIEM) → Manage value lists) to export and import value lists separately.

      */
    importRules(props: ImportRulesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/rules/_import', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Import Timelines.
     */
    importTimelines(props: ImportTimelinesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/timeline/_import', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    initEntityEngine(props: InitEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/api/entity_store/engines/{entityType}/init', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    initEntityStore(props: InitEntityStoreProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/entity_store/enable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    initMonitoringEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/entity_analytics/monitoring/engine/init', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Initializes the Risk Engine by creating the necessary indices and mappings, removing old transforms, and starting the new risk engine
     */
    initRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/risk_score/engine/init', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Installs migration rules
     */
    installMigrationRules(props: InstallMigrationRulesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/install', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Install and update all Elastic prebuilt detection rules and Timelines.

This endpoint allows you to install and update prebuilt detection rules and Timelines provided by Elastic. 
When you call this endpoint, it will:
- Install any new prebuilt detection rules that are not currently installed in your system.
- Update any existing prebuilt detection rules that have been modified or improved by Elastic.
- Install any new prebuilt Timelines that are not currently installed in your system.
- Update any existing prebuilt Timelines that have been modified or improved by Elastic.

This ensures that your detection engine is always up-to-date with the latest rules and Timelines, 
providing you with the most current and effective threat detection capabilities.

      */
    installPrebuiltRulesAndTimelines(kibanaSpace: string = 'default') {
      return supertest
        .put(routeWithNamespace('/api/detection_engine/rules/prepackaged', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Install or update prepackaged Timelines.
     */
    installPrepackedTimelines(
      props: InstallPrepackedTimelinesProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/api/timeline/_prepackaged', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    internalUploadAssetCriticalityRecords(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/asset_criticality/upload_csv', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * List entities records, paging, sorting and filtering as needed.
     */
    listEntities(props: ListEntitiesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/entity_store/entities/list', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    listEntityEngines(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/entity_store/engines', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Update specific fields of an existing detection rule using the `rule_id` or `id` field.

The difference between the `id` and `rule_id` is that the `id` is a unique rule identifier that is randomly generated when a rule is created and cannot be set, whereas `rule_id` is a stable rule identifier that can be assigned during rule creation.
> warn
> When used with [API key](https://www.elastic.co/guide/en/kibana/current/api-keys.html) authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

> If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.

      */
    patchRule(props: PatchRuleProps, kibanaSpace: string = 'default') {
      return supertest
        .patch(routeWithNamespace('/api/detection_engine/rules', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Update an existing Timeline. You can update the title, description, date range, pinned events, pinned queries, and/or pinned saved queries of an existing Timeline.
     */
    patchTimeline(props: PatchTimelineProps, kibanaSpace: string = 'default') {
      return supertest
        .patch(routeWithNamespace('/api/timeline', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Apply a bulk action, such as bulk edit, duplicate, or delete, to multiple detection rules. The bulk action is applied to all rules that match the query or to the rules listed by their IDs.

The edit action allows you to add, delete, or set tags, index patterns, investigation fields, rule actions and schedules for multiple rules at once. 
The edit action is idempotent, meaning that if you add a tag to a rule that already has that tag, no changes are made. The same is true for other edit actions, for example removing an index pattern that is not specified in a rule will not result in any changes. The only exception is the `add_rule_actions` and `set_rule_actions` action, which is non-idempotent. This means that if you add or set a rule action to a rule that already has that action, a new action is created with a new unique ID.
> warn
> When used with  [API key](https://www.elastic.co/guide/en/kibana/current/api-keys.html) authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

> If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.

      */
    performRulesBulkAction(props: PerformRulesBulkActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/rules/_bulk_action', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object)
        .query(props.query);
    },
    /**
     * Favorite a Timeline or Timeline template for the current user.
     */
    persistFavoriteRoute(props: PersistFavoriteRouteProps, kibanaSpace: string = 'default') {
      return supertest
        .patch(routeWithNamespace('/api/timeline/_favorite', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Add a note to a Timeline or update an existing note.
     */
    persistNoteRoute(props: PersistNoteRouteProps, kibanaSpace: string = 'default') {
      return supertest
        .patch(routeWithNamespace('/api/note', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Pin/unpin an event to/from an existing Timeline.
     */
    persistPinnedEventRoute(props: PersistPinnedEventRouteProps, kibanaSpace: string = 'default') {
      return supertest
        .patch(routeWithNamespace('/api/pinned_event', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Calculates and returns a list of Risk Scores, sorted by identifier_type and risk score.
     */
    previewRiskScore(props: PreviewRiskScoreProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/risk_score/preview', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    privMonHealth(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/entity_analytics/monitoring/privileges/health', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    readAlertsIndex(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/index', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Retrieve indices that contain detection alerts of a particular age, along with migration information for each of those indices.
     */
    readAlertsMigrationStatus(
      props: ReadAlertsMigrationStatusProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/signals/migration_status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
      * Retrieve the status of all Elastic prebuilt detection rules and Timelines. 

This endpoint provides detailed information about the number of custom rules, installed prebuilt rules, available prebuilt rules that are not installed, outdated prebuilt rules, installed prebuilt timelines, available prebuilt timelines that are not installed, and outdated prebuilt timelines.

      */
    readPrebuiltRulesAndTimelinesStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/rules/prepackaged/_status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Retrieves whether or not the user is authenticated, and the user's Kibana
space and index privileges, which determine if the user can create an
index for the Elastic Security alerts generated by
detection engine rules.

      */
    readPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    readRiskEngineSettings(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/risk_score/engine/settings', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Retrieve a detection rule using the `rule_id` or `id` field.

The URL query must include one of the following:

* `id` - `GET /api/detection_engine/rules?id=<id>`
* `rule_id` - `GET /api/detection_engine/rules?rule_id=<rule_id>`

The difference between the `id` and `rule_id` is that the `id` is a unique rule identifier that is randomly generated when a rule is created and cannot be set, whereas `rule_id` is a stable rule identifier that can be assigned during rule creation.

      */
    readRule(props: ReadRuleProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/rules', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * List all unique tags from all detection rules.
     */
    readTags(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/detection_engine/tags', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    resolveTimeline(props: ResolveTimelineProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/timeline/resolve', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    riskEngineGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/internal/risk_engine/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    rulePreview(props: RulePreviewProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/rules/preview', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object)
        .query(props.query);
    },
    /**
     * Run a shell command on an endpoint.
     */
    runScriptAction(props: RunScriptActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/endpoint/action/runscript', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Schedule the risk scoring engine to run as soon as possible. You can use this to recalculate entity risk scores after updating their asset criticality.
     */
    scheduleRiskEngineNow(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/risk_score/engine/schedule_now', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Find and/or aggregate detection alerts that match the given query.
     */
    searchAlerts(props: SearchAlertsProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/search', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    searchPrivilegesIndices(props: SearchPrivilegesIndicesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(routeWithNamespace('/api/entity_analytics/monitoring/privileges/indices', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
      * Assign users to detection alerts, and unassign them from alerts.
> info
> You cannot add and remove the same assignee in the same request.

      */
    setAlertAssignees(props: SetAlertAssigneesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/assignees', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Set the status of one or more detection alerts.
     */
    setAlertsStatus(props: SetAlertsStatusProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * And tags to detection alerts, and remove them from alerts.
> info
> You cannot add and remove the same alert tag in the same request.

      */
    setAlertTags(props: SetAlertTagsProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/detection_engine/signals/tags', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    startEntityEngine(props: StartEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/api/entity_store/engines/{entityType}/start', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Starts a SIEM rules migration using the migration id provided
     */
    startRuleMigration(props: StartRuleMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/start', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    stopEntityEngine(props: StopEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/api/entity_store/engines/{entityType}/stop', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Stops a running SIEM rules migration using the migration id provided
     */
    stopRuleMigration(props: StopRuleMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/stop', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Suggests user profiles.
     */
    suggestUserProfiles(props: SuggestUserProfilesProps, kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/internal/detection_engine/users/_find', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Calculates and persists Risk Scores for an entity, returning the calculated risk score.
     */
    triggerRiskScoreCalculation(
      props: TriggerRiskScoreCalculationProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(routeWithNamespace('/internal/risk_score/calculation/entity', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Update a detection rule using the `rule_id` or `id` field. The original rule is replaced, and all unspecified fields are deleted.

The difference between the `id` and `rule_id` is that the `id` is a unique rule identifier that is randomly generated when a rule is created and cannot be set, whereas `rule_id` is a stable rule identifier that can be assigned during rule creation.
> warn
> When used with [API key](https://www.elastic.co/guide/en/kibana/current/api-keys.html) authentication, the user's key gets assigned to the affected rules. If the user's key gets deleted or the user becomes inactive, the rules will stop running.

> If the API key that is used for authorization has different privileges than the key that created or most recently updated the rule, the rule behavior might change.

      */
    updateRule(props: UpdateRuleProps, kibanaSpace: string = 'default') {
      return supertest
        .put(routeWithNamespace('/api/detection_engine/rules', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Updates rules migrations attributes
     */
    updateRuleMigration(props: UpdateRuleMigrationProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    updateWorkflowInsight(props: UpdateWorkflowInsightProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          routeWithNamespace(
            replaceParams('/internal/api/endpoint/workflow_insights/{insightId}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    uploadAssetCriticalityRecords(kibanaSpace: string = 'default') {
      return supertest
        .post(routeWithNamespace('/api/asset_criticality/upload_csv', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Creates or updates resources for an existing SIEM rules migration
     */
    upsertRuleMigrationResources(
      props: UpsertRuleMigrationResourcesProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(
          routeWithNamespace(
            replaceParams('/internal/siem_migrations/rules/{migration_id}/resources', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
  };
}

export interface AlertsMigrationCleanupProps {
  body: AlertsMigrationCleanupRequestBodyInput;
}
export interface BulkUpsertAssetCriticalityRecordsProps {
  body: BulkUpsertAssetCriticalityRecordsRequestBodyInput;
}
export interface CleanDraftTimelinesProps {
  body: CleanDraftTimelinesRequestBodyInput;
}
export interface ConfigureRiskEngineSavedObjectProps {
  body: ConfigureRiskEngineSavedObjectRequestBodyInput;
}
export interface CopyTimelineProps {
  body: CopyTimelineRequestBodyInput;
}
export interface CreateAlertsMigrationProps {
  body: CreateAlertsMigrationRequestBodyInput;
}
export interface CreateAssetCriticalityRecordProps {
  body: CreateAssetCriticalityRecordRequestBodyInput;
}
export interface CreateRuleProps {
  body: CreateRuleRequestBodyInput;
}
export interface CreateRuleMigrationProps {
  params: CreateRuleMigrationRequestParamsInput;
  body: CreateRuleMigrationRequestBodyInput;
}
export interface CreateTimelinesProps {
  body: CreateTimelinesRequestBodyInput;
}
export interface CreateUpdateProtectionUpdatesNoteProps {
  params: CreateUpdateProtectionUpdatesNoteRequestParamsInput;
  body: CreateUpdateProtectionUpdatesNoteRequestBodyInput;
}
export interface DeleteAssetCriticalityRecordProps {
  query: DeleteAssetCriticalityRecordRequestQueryInput;
}
export interface DeleteEntityEngineProps {
  query: DeleteEntityEngineRequestQueryInput;
  params: DeleteEntityEngineRequestParamsInput;
}
export interface DeleteNoteProps {
  body: DeleteNoteRequestBodyInput;
}
export interface DeleteRuleProps {
  query: DeleteRuleRequestQueryInput;
}
export interface DeleteTimelinesProps {
  body: DeleteTimelinesRequestBodyInput;
}
export interface DeprecatedTriggerRiskScoreCalculationProps {
  body: DeprecatedTriggerRiskScoreCalculationRequestBodyInput;
}
export interface EndpointExecuteActionProps {
  body: EndpointExecuteActionRequestBodyInput;
}
export interface EndpointFileDownloadProps {
  params: EndpointFileDownloadRequestParamsInput;
}
export interface EndpointFileInfoProps {
  params: EndpointFileInfoRequestParamsInput;
}
export interface EndpointGetActionsDetailsProps {
  params: EndpointGetActionsDetailsRequestParamsInput;
}
export interface EndpointGetActionsListProps {
  query: EndpointGetActionsListRequestQueryInput;
}
export interface EndpointGetActionsStatusProps {
  query: EndpointGetActionsStatusRequestQueryInput;
}
export interface EndpointGetFileActionProps {
  body: EndpointGetFileActionRequestBodyInput;
}
export interface EndpointGetProcessesActionProps {
  body: EndpointGetProcessesActionRequestBodyInput;
}
export interface EndpointIsolateActionProps {
  body: EndpointIsolateActionRequestBodyInput;
}
export interface EndpointKillProcessActionProps {
  body: EndpointKillProcessActionRequestBodyInput;
}
export interface EndpointScanActionProps {
  body: EndpointScanActionRequestBodyInput;
}
export interface EndpointSuspendProcessActionProps {
  body: EndpointSuspendProcessActionRequestBodyInput;
}
export interface EndpointUnisolateActionProps {
  body: EndpointUnisolateActionRequestBodyInput;
}
export interface ExportRulesProps {
  query: ExportRulesRequestQueryInput;
  body: ExportRulesRequestBodyInput;
}
export interface ExportTimelinesProps {
  query: ExportTimelinesRequestQueryInput;
  body: ExportTimelinesRequestBodyInput;
}
export interface FinalizeAlertsMigrationProps {
  body: FinalizeAlertsMigrationRequestBodyInput;
}
export interface FindAssetCriticalityRecordsProps {
  query: FindAssetCriticalityRecordsRequestQueryInput;
}
export interface FindRulesProps {
  query: FindRulesRequestQueryInput;
}
export interface GetAssetCriticalityRecordProps {
  query: GetAssetCriticalityRecordRequestQueryInput;
}
export interface GetDraftTimelinesProps {
  query: GetDraftTimelinesRequestQueryInput;
}
export interface GetEndpointMetadataListProps {
  query: GetEndpointMetadataListRequestQueryInput;
}
export interface GetEndpointSuggestionsProps {
  params: GetEndpointSuggestionsRequestParamsInput;
  body: GetEndpointSuggestionsRequestBodyInput;
}
export interface GetEntityEngineProps {
  params: GetEntityEngineRequestParamsInput;
}
export interface GetEntityStoreStatusProps {
  query: GetEntityStoreStatusRequestQueryInput;
}
export interface GetNotesProps {
  query: GetNotesRequestQueryInput;
}
export interface GetPolicyResponseProps {
  query: GetPolicyResponseRequestQueryInput;
}
export interface GetProtectionUpdatesNoteProps {
  params: GetProtectionUpdatesNoteRequestParamsInput;
}
export interface GetRuleExecutionEventsProps {
  query: GetRuleExecutionEventsRequestQueryInput;
  params: GetRuleExecutionEventsRequestParamsInput;
}
export interface GetRuleExecutionResultsProps {
  query: GetRuleExecutionResultsRequestQueryInput;
  params: GetRuleExecutionResultsRequestParamsInput;
}
export interface GetRuleMigrationProps {
  query: GetRuleMigrationRequestQueryInput;
  params: GetRuleMigrationRequestParamsInput;
}
export interface GetRuleMigrationPrebuiltRulesProps {
  params: GetRuleMigrationPrebuiltRulesRequestParamsInput;
}
export interface GetRuleMigrationResourcesProps {
  query: GetRuleMigrationResourcesRequestQueryInput;
  params: GetRuleMigrationResourcesRequestParamsInput;
}
export interface GetRuleMigrationResourcesMissingProps {
  params: GetRuleMigrationResourcesMissingRequestParamsInput;
}
export interface GetRuleMigrationStatsProps {
  params: GetRuleMigrationStatsRequestParamsInput;
}
export interface GetRuleMigrationTranslationStatsProps {
  params: GetRuleMigrationTranslationStatsRequestParamsInput;
}
export interface GetTimelineProps {
  query: GetTimelineRequestQueryInput;
}
export interface GetTimelinesProps {
  query: GetTimelinesRequestQueryInput;
}
export interface GetWorkflowInsightsProps {
  query: GetWorkflowInsightsRequestQueryInput;
}
export interface ImportRulesProps {
  query: ImportRulesRequestQueryInput;
}
export interface ImportTimelinesProps {
  body: ImportTimelinesRequestBodyInput;
}
export interface InitEntityEngineProps {
  params: InitEntityEngineRequestParamsInput;
  body: InitEntityEngineRequestBodyInput;
}
export interface InitEntityStoreProps {
  body: InitEntityStoreRequestBodyInput;
}
export interface InstallMigrationRulesProps {
  params: InstallMigrationRulesRequestParamsInput;
  body: InstallMigrationRulesRequestBodyInput;
}
export interface InstallPrepackedTimelinesProps {
  body: InstallPrepackedTimelinesRequestBodyInput;
}
export interface ListEntitiesProps {
  query: ListEntitiesRequestQueryInput;
}
export interface PatchRuleProps {
  body: PatchRuleRequestBodyInput;
}
export interface PatchTimelineProps {
  body: PatchTimelineRequestBodyInput;
}
export interface PerformRulesBulkActionProps {
  query: PerformRulesBulkActionRequestQueryInput;
  body: PerformRulesBulkActionRequestBodyInput;
}
export interface PersistFavoriteRouteProps {
  body: PersistFavoriteRouteRequestBodyInput;
}
export interface PersistNoteRouteProps {
  body: PersistNoteRouteRequestBodyInput;
}
export interface PersistPinnedEventRouteProps {
  body: PersistPinnedEventRouteRequestBodyInput;
}
export interface PreviewRiskScoreProps {
  body: PreviewRiskScoreRequestBodyInput;
}
export interface ReadAlertsMigrationStatusProps {
  query: ReadAlertsMigrationStatusRequestQueryInput;
}
export interface ReadRuleProps {
  query: ReadRuleRequestQueryInput;
}
export interface ResolveTimelineProps {
  query: ResolveTimelineRequestQueryInput;
}
export interface RulePreviewProps {
  query: RulePreviewRequestQueryInput;
  body: RulePreviewRequestBodyInput;
}
export interface RunScriptActionProps {
  body: RunScriptActionRequestBodyInput;
}
export interface SearchAlertsProps {
  body: SearchAlertsRequestBodyInput;
}
export interface SearchPrivilegesIndicesProps {
  query: SearchPrivilegesIndicesRequestQueryInput;
}
export interface SetAlertAssigneesProps {
  body: SetAlertAssigneesRequestBodyInput;
}
export interface SetAlertsStatusProps {
  body: SetAlertsStatusRequestBodyInput;
}
export interface SetAlertTagsProps {
  body: SetAlertTagsRequestBodyInput;
}
export interface StartEntityEngineProps {
  params: StartEntityEngineRequestParamsInput;
}
export interface StartRuleMigrationProps {
  params: StartRuleMigrationRequestParamsInput;
  body: StartRuleMigrationRequestBodyInput;
}
export interface StopEntityEngineProps {
  params: StopEntityEngineRequestParamsInput;
}
export interface StopRuleMigrationProps {
  params: StopRuleMigrationRequestParamsInput;
}
export interface SuggestUserProfilesProps {
  query: SuggestUserProfilesRequestQueryInput;
}
export interface TriggerRiskScoreCalculationProps {
  body: TriggerRiskScoreCalculationRequestBodyInput;
}
export interface UpdateRuleProps {
  body: UpdateRuleRequestBodyInput;
}
export interface UpdateRuleMigrationProps {
  params: UpdateRuleMigrationRequestParamsInput;
  body: UpdateRuleMigrationRequestBodyInput;
}
export interface UpdateWorkflowInsightProps {
  params: UpdateWorkflowInsightRequestParamsInput;
  body: UpdateWorkflowInsightRequestBodyInput;
}
export interface UpsertRuleMigrationResourcesProps {
  params: UpsertRuleMigrationResourcesRequestParamsInput;
  body: UpsertRuleMigrationResourcesRequestBodyInput;
}
